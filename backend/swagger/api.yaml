openapi: 3.0.3
info:
  title: EcoFinds API
  version: 1.0.0
  description: API documentation for EcoFinds eco-friendly marketplace backend

servers:
  - url: http://localhost:5000/api
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error or missing fields
        '409':
          description: Email already registered

  /auth/login:
    post:
      summary: Log in existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login returning JWT token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserResponse'
                  - type: object
                    properties:
                      accessToken:
                        type: string
                        description: JWT access token
        '401':
          description: Invalid credentials

  /users/me:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

    patch:
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

  /products:
    get:
      summary: List products with optional filters
      parameters:
        - name: category
          in: query
          schema:
            type: integer
          description: Filter by category ID
        - name: q
          in: query
          schema:
            type: string
          description: Search keyword in product title
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Max number of products to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of products to skip
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'

    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /products/{id}:
    get:
      summary: Get product details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    patch:
      summary: Update product (owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not owner)
        '404':
          description: Product not found

    delete:
      summary: Delete product (owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found

  /cart/items:
    post:
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

    get:
      summary: View cart items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of cart items
          content:
            application/json:
              schema:
                type: object
                properties:
                  cartItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized

  /cart/items/{id}:
    delete:
      summary: Remove item from cart by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item removed
        '401':
          description: Unauthorized
        '404':
          description: Item not found

  /purchases/checkout:
    post:
      summary: Checkout cart to create a purchase
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Purchase completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseConfirmation'
        '400':
          description: Cart empty or invalid
        '401':
          description: Unauthorized

  /purchases:
    get:
      summary: Get user's purchase history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  purchases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Purchase'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        username:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    UserResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
              format: email
            username:
              type: string
            bio:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        bio:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        categoryId:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        imageUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        Category:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string

    CreateProductRequest:
      type: object
      required:
        - title
        - categoryId
        - price
      properties:
        title:
          type: string
        description:
          type: string
        categoryId:
          type: integer
        price:
          type: number
          format: float
        imageUrl:
          type: string
          format: uri

    UpdateProductRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        categoryId:
          type: integer
        price:
          type: number
          format: float
        imageUrl:
          type: string
          format: uri

    AddCartItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
        quantity:
          type: integer
          minimum: 1

    CartItem:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        product:
          $ref: '#/components/schemas/Product'

    PurchaseConfirmation:
      type: object
      properties:
        purchaseId:
          type: integer
        total:
          type: number
          format: float
        message:
          type: string

    Purchase:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        total:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        PurchaseItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
              price:
                type: number
                format: float
              quantity:
                type: integer
              Product:
                $ref: '#/components/schemas/Product'
